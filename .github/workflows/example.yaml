name: lint-and-build

on:
  push:
    branches:
      - develop
      - main
  repository_dispatch:
    types: [epp-request-dispatch]
  pull_request:
    types: ["opened", "reopened", "synchronize", "ready_for_review"]
    branches:
      - develop
      - main

concurrency:
  group: develop-apricot-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  test-suite:
    if: "! github.event.pull_request.draft"
    runs-on: ubuntu-latest

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      redis-socketio:
        image: redis:alpine
        ports:
          - 12000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: "root"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
        timeout-minutes: 5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
        timeout-minutes: 5

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
        timeout-minutes: 5

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
        timeout-minutes: 5

      - name: Pip Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        timeout-minutes: 5

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
        timeout-minutes: 5

      - name: Yarn Cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
        timeout-minutes: 5

      - name: Setup
        run: |
          pip install frappe-bench
          bench init --skip-redis-config-generation --frappe-branch version-14 --skip-assets --python "$(which python)" ~/frappe-bench
          mysql --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mysql --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"
        timeout-minutes: 5

      - name: Install
        working-directory: /home/runner/frappe-bench
        run: |
          bench get-app erpnext --branch v14.25.0
          bench get-app hrms
          bench get-app apricot $GITHUB_WORKSPACE
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin test_site
          bench --site test_site install-app erpnext
          bench --site test_site install-app hrms
          bench --site test_site install-app apricot
          bench build
        env:
          CI: "Yes"
        timeout-minutes: 10

      # - name: Run Tests
      #   working-directory: /home/runner/frappe-bench
      #   run: |
      #     bench --site test_site set-config allow_tests true
      #     bench --site test_site run-tests --app apricot
      #   env:
      #     TYPE: server

  build-and-push:
    runs-on: self-hosted
    needs: test-suite
    if: ${{ github.event_name == 'push' || github.event_name == 'repository_dispatch' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
        timeout-minutes: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 5

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        timeout-minutes: 5

      - name: Create Tag
        id: tag
        run: echo "tag=${{ github.ref_name }}-$(git rev-parse --short HEAD)-$(date +%s)" >> $GITHUB_OUTPUT
        timeout-minutes: 5

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            BRANCH=${{ github.ref_name }}
            AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          context: .
          push: true
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.tag.outputs.tag }}
        timeout-minutes: 10

      - name: Call FluxCD Webhook
        run: curl -iX GET ${{ secrets.FLUXCD_RECEIVER_WEBHOOK }}

      - name: Notify Workflow Status on Mattermost
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_FOOTER: "Powered By Improwised Technologies Pvt. Ltd."
          SLACK_MESSAGE: "##### Build workflow run **${{ job.status }}**"
        timeout-minutes: 5



name: CI Pipelines

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Frontend Dependencies
      run: npm install
      working-directory: ./frontend

    - name: Run Frontend Tests
      run: npm run test
      working-directory: ./frontend

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >
          --health-cmd="pg_isready -U test_user" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Backend Dependencies
      run: go mod tidy
      working-directory: ./backend

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          pg_isready -h localhost -p 5432 -U test_user && break
          sleep 3
        done

    - name: Run Backend Tests
      env:
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: test_db
        POSTGRES_HOST: localhost
      run: go test ./... -v
      working-directory: ./backend
