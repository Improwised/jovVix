name: Build and Push api

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "api/**"
      - ".github/workflows/test-build-push-api.yaml"
      - "!**.md"
  pull_request:
    types: ["opened", "reopened", "synchronize", "ready_for_review"]
    branches:
      - develop
      - main
    paths:
      - "api/**"
      - ".github/workflows/test-build-push-api.yaml"
      - "!**.md"

jobs:
  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.2-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 5

      kratos:
        image: oryd/kratos:v1.0.0
        ports:
          - 4433:4433
          - 4434:4434
        volumes:
          - ${{ github.workspace }}/.github/kratos-config.yaml:/etc/config/kratos.yaml
          - ${{ github.workspace }}/.github/identity.schema.json:/etc/config/identity.schema.json
        options: >-
          --health-cmd "curl -f http://localhost:4433/health/ready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        command: serve -c /etc/config/kratos.yaml

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install Backend Dependencies
        working-directory: ./api
        run: |
          go mod tidy
          go mod vendor

      - name: Run Backend Tests
        working-directory: ./api
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_HOST: postgres
        run: go test ./... -v

  build:
    name: Build and Push Image
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ECR_REGISTRY }}/${{ vars.AWS_ECR_REPOSITORY_API }}
          tags: |
            type=raw,value=${{ github.head_ref || github.ref_name }}-{{sha}}-{{date 'X'}}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      # Uncomment below to enable Slack notifications
      # - name: status of workflow
      #   uses: rtCamp/action-slack-notify@v2
      #   if: always()
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.WEBHOOK_URL }}
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_FOOTER: ""
      #     SLACK_MESSAGE: "Build workflow run **${{ job.status }}**"
